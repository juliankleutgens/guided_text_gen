# ---------- Defaults ----------
defaults:
  - _self_
  - /callbacks: [checkpoint_every_n_steps, checkpoint_monitor, learning_rate_monitor]
  - /data: openwebtext
  - /model: small
  - /strategy: ddp
  - /noise: loglinear
  - /lr_scheduler: constant_warmup
  - /classifier_model: tiny-classifier   # options: small | tiny
  - /ratio_model: tiny-ratio             # options: small | tiny
  - /guidance: null

# ---------- Global settings ----------
seed: 1
mode: train                              # options: train | ppl_eval | sample_eval | train_ratio

# ---------- Diffusion / Model ----------
diffusion: absorbing_state               # options: absorbing_state | uniform
backbone: dit                            # options: dit | dimamba
classifier_backbone: dit                 # options: dit | dimamba
ratio_backbone: dit
parameterization: subs                   # options: subs | d3pm | sedd
time_conditioning: true                  # if true, σₜ is passed into backbone
T: 0                                     # 0 = continuous time, 1000 = discrete steps
subs_masking: false                      # true: mask‑only (MLDM) | false: full substitution (D3PM)
debug: false                             # true: only 10 steps for training and only 200 Samples, for debugging 

# =====================
#  Data Loading
# =====================
loader:
  global_batch_size: 128            # global batch size, i.e., per accelerator
  eval_global_batch_size: ${.global_batch_size}

  # batch_size and eval_batch_size are **per machine**
  batch_size: ${div_up:${.global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  eval_batch_size: ${div_up:${.eval_global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}

  num_workers: ${eval:"len(__import__('os').sched_getaffinity(0))"}
  pin_memory: false
  persistent_workers: true

# =====================
#  Sampling
# =====================
sampling:
  predictor: ddpm_cache                  # options: analytic | ddpm | ddpm_cache
  steps: 128
  noise_removal: true
  num_sample_batches: 2                  # total samples = num_gpus * loader.eval_batch_size * num_sample_batches
  num_sample_log: 2
  semi_ar: false
  stride_length: 1
  num_strides: 1

# =====================
#  Training (common anchor)
# =====================
training: &base_training
  ema: 0.9999
  antithetic_sampling: true
  importance_sampling: false
  sampling_eps: 1e-3
  change_of_variables: false            # switch in different noisy metric

training_classifier:
  <<: *base_training
  use_label_smoothing: true
  val_metric_for_best_model: cross_entropy   # options: gen_ppl | cross_entropy | total

training_ratio:
  <<: *base_training
  eta1: 0.1                            # cycle regularization
  eta2: 0.0                            # consistency regularization
  classifier_output_with_sigmoid: false
  val_metric_for_best_model: total

# =====================
#  Evaluation
# =====================
eval:
  checkpoint_path: ''                  # path to evaluate checkpoint after training
  disable_ema: false
  compute_generative_perplexity: false
  perplexity_batch_size: 8
  compute_perplexity_on_sanity: false
  gen_ppl_eval_model_name_or_path: gpt2-large   # e.g. gpt2-large | meta-llama/Llama-2-7b-hf
  generate_samples: true

# =====================
#  Optimizer
# =====================
optim:
  weight_decay: 0
  lr: 3e-4
  beta1: 0.9
  beta2: 0.999
  eps: 1e-8

# =====================
#  Trainer (common anchor)
# =====================
trainer: &base_trainer
  _target_: lightning.Trainer
  accelerator: cuda
  num_nodes: 1
  devices: ${device_count:}
  accumulate_grad_batches: ${div_up:${loader.global_batch_size}, ${eval:${trainer.devices} * ${loader.batch_size} * ${trainer.num_nodes}}}
  gradient_clip_val: 1.0
  precision: 'bf16-mixed'                      # 'bf16' or '32-true' for mixed precision
  num_sanity_val_steps: 2
  max_steps: 50_000                        # default: 1_000_000
  log_every_n_steps: 10
  limit_train_batches: 1.0             # 1.0 = full dataset
  limit_val_batches: 1.0               # 1.0 = full dataset
  val_check_interval: 0.5              # every ... epoch if <= 1.0, or every ... steps if > 1.0

# Trainers for different tasks
trainer_ti:
  <<: *base_trainer
  max_steps: 2_000

trainer_td:
  <<: *base_trainer
  max_steps: 2_000

trainer_ratio:
  <<: *base_trainer
  max_steps: 30_000

# =====================
#  Model checkpoints
# =====================
classifier_ti:
  ckpt_path: ""
  retrain_when_loaded: true           # just use it, don't train

classifier_td:
  ckpt_path: ""                        # leave blank to train from scratch
  retrain_when_loaded: false           # just use it, don't train

ratio_model:
  ckpt_path: ""                        # no pre-trained ratio -> will train
  retrain_when_loaded: true

# =====================
#  Logging
# =====================
wandb:
  project: text-diffusion
  notes: training
  group: null
  job_type: null
  name: null
  id: ${.name}_${seed}
  tags:
    - ${noise.type}
    - ${data.train}
    - ${data.valid}

# =====================
#  Hydra
# =====================
hydra:
  run:
    dir: ./outputs/${data.train}/${mode}/${now:%Y.%m.%d}/${now:%H%M%S}_${eval:"f'{__import__(\"random\").randint(0,9999):04d}'"}
  job:
    chdir: true

# =====================
#  Checkpointing
# =====================
checkpointing:
  save_dir: ${cwd:}                    # custom dir, e.g., S3 bucket
  resume_from_ckpt: true
  resume_ckpt_path: ${.save_dir}/checkpoints/last.ckpt