defaults:
  - _self_
  - /callbacks: [checkpoint_every_n_steps, checkpoint_monitor, learning_rate_monitor]
  - /data: openwebtext
  - /model: small
  - /strategy: ddp
  - /noise: loglinear
  - /lr_scheduler: constant_warmup
  - /classifier_model: tiny-classifier # small / tiny
  - /ratio_model: tiny-ratio # small / tiny
  - /guidance: null

mode: train  # train / ppl_eval / sample_eval / train_ratio
diffusion: absorbing_state # absorbing_state / uniform
backbone: dit  # dit / dimamba / ar
classifier_backbone: dit  # dit / dimamba / ar
ratio_backbone: dit
parameterization: subs  # subs / d3pm / sedd
time_conditioning: True # If true noise scale σₜ is passed into your backbone. False: it helps for caching
T: 0  # 0 (continuous time) / 1000 
subs_masking: False # True (mask‐only): simpler corruption (MLDM) / False (full substitution, all tokens): more complex corruption (D3PM)

seed: 1

loader:
  global_batch_size: 64
  eval_global_batch_size: ${.global_batch_size}
  # Note: batch_size and eval_batch_size are **per machine**
  batch_size: ${div_up:${.global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  eval_batch_size: ${div_up:${.eval_global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  num_workers: ${eval:"len(__import__('os').sched_getaffinity(0))"}
  pin_memory: True
  persistent_workers: True

sampling:
  predictor: ddpm_cache  # analytic, ddpm, ddpm_cache
  steps: 128
  noise_removal: True
  num_sample_batches: 2  # Total samples: `num_gpus` * `loader.eval_batch_size` * num_sample_batches
  num_sample_log: 2
  semi_ar: False
  stride_length: 1
  num_strides: 1

training: &base_training
  ema: 0.9999
  antithetic_sampling: True
  importance_sampling: False
  sampling_eps: 1e-3
  change_of_variables: False # switch in different noisy metric

training_classifier:
  <<: *base_training
  use_label_smoothing: True

training_ratio:
  <<: *base_training
  eta1: 0.1 # the cycle regularization is used
  eta2: 0.0 # the consistency regularization is used
  classifier_output_with_sigmoid: false

eval:
  checkpoint_path: ''  # Used to evaluate a checkpoint after training.
  disable_ema: False
  compute_generative_perplexity: False
  perplexity_batch_size: 8
  compute_perplexity_on_sanity: False
  gen_ppl_eval_model_name_or_path: gpt2-large  # gpt2-large, meta-llama/Llama-2-7b-hf
  generate_samples: True

optim:
  weight_decay: 0
  lr: 3e-4
  beta1: 0.9
  beta2: 0.999
  eps: 1e-8

# trainer is passed wholesale to PyTorch Lightning’s Trainer
trainer: &base_trainer
  _target_: lightning.Trainer
  accelerator: cpu
  num_nodes: 1
  devices: ${device_count:}
  accumulate_grad_batches: ${div_up:${loader.global_batch_size}, ${eval:${trainer.devices} * ${loader.batch_size} * ${trainer.num_nodes}}}
  gradient_clip_val: 1.0
  precision: '32' #'bf16'
  num_sanity_val_steps: 1 #2
  max_steps: 20 #1_000_000
  log_every_n_steps: 10
  limit_train_batches: 1.0   # train on full dataset, can be used to toggle quick run
  limit_val_batches: 1.0     # validate on full dataset, can be used to toggle quick run
  val_check_interval: 1.0  # validate every epoch

classifier_ti:
  ckpt_path: "/Users/juliankleutgens/PycharmProjects/mdlm-master/pretrained_model/ti_classifier/checkpoints/best.ckpt"         # leave blank to train from scratch
  retrain_when_loaded: false   # just use it, don't train

classifier_td:
  ckpt_path: "/Users/juliankleutgens/PycharmProjects/mdlm-master/pretrained_model/td_classifier/checkpoints/best.ckpt"
  retrain_when_loaded: false  # just use it, don't train

ratio_model:
  ckpt_path: ""         # no pre-trained ratio -> will train
  retrain_when_loaded: true

trainer_ti:                            # TI classifier trainer
  <<: *base_trainer
  max_steps: 20

trainer_td:                            # TD classifier trainer
  <<: *base_trainer
  max_steps: 20

trainer_ratio:                         # ratio model trainer
  # ToDo: Why does ratio training take so much longer?
  <<: *base_trainer
  max_steps: 5

wandb:
  project: text-diffusion
  notes: Mulan for text
  group: null
  job_type: null
  name: null
  id: ${.name}_${seed}
  tags:
    - ${noise.type}
    - ${data.train}
    - ${data.valid}

hydra:
  run:
    dir: ./outputs/${data.train}/${now:%Y.%m.%d}/${now:%H%M%S}
  job:
    chdir: true

checkpointing:
  # Use custom `save_dir` if, e.g., saving to S3 bucket, otherwise leave this parameter as is
  save_dir: ${cwd:}
  # Note: `checkpoints` path should correspond to `checkpoint_every_n_steps.dirpath`
  resume_from_ckpt: true
  resume_ckpt_path: ${.save_dir}/checkpoints/last.ckpt
